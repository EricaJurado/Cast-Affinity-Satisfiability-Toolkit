#const vulnerability_high_level=2.
#const vulnerability_low_level=5.
%#const high=1.
%#const neutral=0.
%#const low=-1.
%% Generation, non-instance domains

facet(vulnerability).

vulnerability(1..10).

status(vulnerability, high).
status(vulnerability, neutral).
status(vulnerability, low).

%% Generate/Assign

%every human get an vulnerability value
1{level(vulnerability,H,X) : vulnerability(X)}1:- human(H).

%every pair of humans gets a vulnerability similarity level
1{vulnerability_sim(A,B,X) : status(vulnerability, X)}1:- human(A), human(B), A!=B.

%% Integrity constraints

% high vulnerability_sim if vulnerability difference is within some bound
:-vulnerability_sim(A,B,high), human(A), human(B), A != B, 
		level(vulnerability,A,X), level(vulnerability,B,Y),
		vulnerability(X), vulnerability(Y), |X-Y| > vulnerability_high_level.

% low vulnerability_sim if vulnerability difference is beyond some bound
:-vulnerability_sim(A,B,low), human(A), human(B), A != B, 
		level(vulnerability,A,X), level(vulnerability,B,Y),
		vulnerability(X), vulnerability(Y), |X-Y| < vulnerability_low_level.

% neutral vulnerability_sim if not similar or opposite 
:-vulnerability_sim(A,B,neutral), human(A), human(B), A != B, 
		level(vulnerability,A,X), level(vulnerability,B,Y),
		vulnerability(X), vulnerability(Y), |X-Y| <= vulnerability_high_level.

:-vulnerability_sim(A,B,neutral), human(A), human(B), A != B, 
		level(vulnerability,A,X), level(vulnerability,B,Y),
		vulnerability(X), vulnerability(Y), |X-Y| >= vulnerability_low_level.


